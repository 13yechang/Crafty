// Generated by CoffeeScript 1.6.2
(function() {
  var Parser, data, dirIn, dirOut, file, files, fs, generateToc, parseJS, saveMd, _, _i, _len,
    __hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  files = ["2D.js"];

  dirIn = 'src/';

  dirOut = 'markdown/';

  data = [];

  fs = require('fs');

  Parser = (function() {
    function Parser(name) {
      this.name = name;
    }

    return Parser;

  })();

  parseJS = function(path) {
    var category, clean, code, components, content, event, item, line, lines, name, open, see, triggers, _i, _len;

    lines = fs.readFileSync(dirIn + path).toString().split("\n");
    open = false;
    content = [];
    category = [];
    components = [];
    see = [];
    triggers = [];
    name = '';
    code = [];
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      if (line.indexOf('/**@') !== -1 && !open) {
        open = true;
      }
      if (open) {
        clean = line.trim().replace(/\/\*\*\@|\*\/|\*/, '');
        if (clean[0] = ' ') {
          clean = clean.substr(1);
        }
        if (clean.trim() === '') {

        } else if (clean.indexOf('@category') !== -1) {
          category.push(clean.slice(clean.indexOf('@category') + 9).trim());
        } else if (clean.indexOf('@comp') !== -1) {
          components.push(clean.slice(clean.indexOf('@comp') + 5).trim());
        } else if (clean.indexOf('@see') !== -1) {
          see.push(clean.slice(clean.indexOf('@see') + 4).trim());
        } else if (clean.indexOf('@trigger') !== -1) {
          event = clean.slice(clean.indexOf('@trigger') + 8);
          triggers.push(clean.slice(clean.indexOf('@trigger') + 8).trim());
        } else if (/\#[^\#]/.test(clean)) {
          name = clean.slice(clean.indexOf('#') + 1).trim();
        } else if (clean.indexOf('@sign') !== -1) {
          code.push('');
          code.push(clean.slice(clean.indexOf('@sign') + 5).trim());
        } else if (clean.indexOf('@param') !== -1) {
          code.push(clean.slice(clean.indexOf('@param') + 6).trim());
        } else if (clean.indexOf('@example') !== -1) {

        } else {
          content.push(clean);
        }
      }
      if (line.indexOf('*/') !== -1 && open) {
        open = false;
        item = {
          name: name,
          comp: components,
          cat: category,
          see: see,
          trig: triggers,
          cont: content,
          code: code
        };
        data.push(item);
        console.log('====================================');
        console.log(item);
        components = [];
        category = [];
        content = [];
        see = [];
        triggers = [];
        code = [];
        name = '';
      }
    }
    return content;
  };

  generateToc = function(data) {
    var item, toc, _i, _len;

    toc = {};
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      item = data[_i];
      if (toc[item.cat] === void 0) {
        toc[item.cat] = {};
      }
      if (toc[item.cat][item.comp] === void 0) {
        toc[item.cat][item.comp] = [];
      }
      if (item.name === item.comp) {
        toc[item.cat][item.comp].shift(item);
      } else {
        toc[item.cat][item.comp].push(item);
      }
    }
    return toc;
  };

  saveMd = function(data) {
    var category, component, components, content, contents, markdown, toc, _results;

    if (data.length) {
      toc = generateToc(data);
      _results = [];
      for (category in toc) {
        if (!__hasProp.call(toc, category)) continue;
        components = toc[category];
        _results.push((function() {
          var _results1;

          _results1 = [];
          for (component in components) {
            if (!__hasProp.call(components, component)) continue;
            contents = components[component];
            markdown = '';
            _results1.push((function() {
              var _i, _len, _results2;

              _results2 = [];
              for (_i = 0, _len = contents.length; _i < _len; _i++) {
                content = contents[_i];
                markdown += '\n\n##' + content.name + '\n\n';
                if (content.code.length) {
                  markdown += content.code.join('\n') + '\n';
                }
                if (content.cont.length) {
                  markdown += content.cont.join('\n') + '\n';
                }
                if (content.trig.length) {
                  markdown += '\n\n####Events\n\n> ' + content.trig.join('  \n') + '\n\n';
                }
                _results2.push(fs.writeFile(dirOut + component + '.md', markdown, function(err) {
                  if (err) {
                    return console.error(err);
                  }
                }));
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    parseJS(file);
  }

  saveMd(data);

}).call(this);
